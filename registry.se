# -*- mode: python -*-
#
# Registry.se: Registry contract with transferable ownership of registries.
#
# Data structures:
# sload(2**256 - 1)          # the number of registries on the contract
# sload(i)                   # owner of the ith registry; i > 0
# sload(msg.sender)          # default registry for msg.sender
# sload(sha3([i, key]:arr))  # the value associated with key in the ith registry.

macro True: 1
macro False: 0

macro RegCount: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

macro check_ownership():
    if sload(reg_id) != msg.sender:
        return(False)

macro check_null_reg_id():
    if reg_id == 0:
        return(False)

macro default_registry(): sload(msg.sender)

macro HARDFAIL(): ~jump(0x100000000) # jump to an invalid code location, 2**32

##### OWNERSHIP #####


def get_owner(reg_id):
    if reg_id:
        return(sload(reg_id))
    else:
        HARDFAIL()


def create_registry():
    with reg_id = sload(RegCount) + 1: # Get the number of registries.
        sstore(RegCount, reg_id) # Increase the number of registries by one.
        sstore(reg_id, msg.sender) # Set the new registry's owner.
        if sload(msg.sender) == 0: # If the owner doesn't have a default, set it.
            sstore(msg.sender, reg_id)
        return(reg_id) # Return the id of the new registry.


def transfer_owner(new_owner, reg_id):
    check_ownership()
    sstore(reg_id, new_owner) # change the owner
    if sload(msg.sender) == reg_id:
        sstore(msg.sender, 0) # delete default reg_id if neccessary.
    return(True)


def get_default_registry(owner):
   return(sload(owner))


def set_default_registry(reg_id):
    check_ownership()
    sstore(msg.sender, reg_id)
    return(True)


def get_storage_key(reg_id, key):
    # returns the key used for storage operations.
    with temp = alloc(64):
        temp[0] = reg_id
        temp[1] = key
        return(sha3(temp, items=2))


##### REGISTRATION #####


macro _register():
    with skey = self.get_storage_key(reg_id, key):
        with current_val = sload(skey):
            if current_val == 0:
                sstore(skey, val)
                True
            else:
                False


def register(key, val):
    with reg_id = default_registry():
        check_null_reg_id()
        return(_register())


def register_by_id(reg_id, key, val):
    check_ownership()
    return(_register())


##### REMOVAL #####


macro _remove():
    with skey = self.get_storage_key(reg_id, key):
        with current_val = sload(skey):
            if current_val != 0:
                sstore(skey, 0)
                True
            else:
                False


def remove(key):
    with reg_id = default_registry():
        check_null_reg_id()
        return(_remove())


def remove_by_id(reg_id, key):
    check_ownership()
    return(_remove())


def remove2(keys:arr):
   with reg_id = default_registry():
       if reg_id == 0:
           return([False, 0]:arr)
       with i = 0:
           with num_keys = len(keys):
               while i < num_keys:
                   with key = keys[i]:
                       with success = _remove():
                           if not success:
                               return([False, i]:arr)
                   i += 1
               return([True, num_keys]:arr)


def remove_by_id2(reg_id, keys:arr):
   if sload(reg_id) != msg.sender:
       return([False, 0]:arr)
   with i = 0:
       with num_keys = len(keys):
           while i < num_keys:
               with key = keys[i]:
                   with success = _remove():
                       if not success:
                           return([False, i]:arr)
               i += 1
           return([True, num_keys]:arr)


##### UPDATES #####


macro _update():
    with skey = self.get_storage_key(reg_id, key):
        with current_val = sload(skey):
            if current_val != 0:
                sstore(skey, val)
                True
            else:
                False

def update(key, val):
    with reg_id = default_registry():
        check_null_reg_id()
        return(_update())

def update_by_id(reg_id, key, val):
    check_ownership()
    return(_update())

##### LOOKUPS #####

macro _lookup():
    with skey = self.get_storage_key(reg_id, key):
        sload(skey)

def lookup(owner, key):
    with reg_id = sload(owner):
        return(_lookup())

def lookup_by_id(reg_id, key):
    return(_lookup())
