inset('MacroLib/common.sem')

macro make_key($id, $name):
    with $ptr = alloc(64):
        $ptr[0] = $id
        $ptr[1] = $name
        sha3($ptr, items=2)

macro check_permission($id):
    IF_ZERO($id, THROW())
    IF_NOT_EQ(sload($id), msg.sender, THROW())


def any():
    IF_NOT_ZERO(msg.value, THROW())


##### CREATION/OWNERSHIP #####
event RegistryCreated(ID: indexed, creator: indexed)
def create():
    with sender = msg.sender:
        with count = sload(0) + 1:
            sstore(count, sender)
            sstore(0, count)
            log(type=RegistryCreated, sender, count)
            return(count: uint256)


def count():
    return(sload(0): uint256)


def getOwner(id: uint256):
    return(sload(id): address)


event OwnerChanged(ID: indexed, newOwner: indexed, oldOwner: indexed)
def changeOwner(id: uint256, newOwner: address):
    check_permission(id)
    log(type=OwnerChanged, id, newOwner, msg.sender)
    sstore(id, newOwner)
    return(True: bool)


event PairAdded(ID: indexed, name: indexed, address: indexed)
def add(id: uint256, name: bytes32, address: address):
    check_permission(id)
    with key = make_key(id, name):
        IF_NOT_ZERO(sload(key), return(False: bool))
        sstore(key, address)
        log(type=PairAdded, id, name, address)
        return(True: bool)


event PairUpdated(ID: indexed, name: indexed, address: indexed)
def update(id: uint256, name: bytes32, address: address):
    check_permission(id)
    with key = make_key(id, name):
        IF_ZERO(sload(key), return(False: bool))
        sstore(key, address)
        log(type=PairUpdated, id, name, address)
        return(True: bool)


event NameRemoved(ID: indexed, name: indexed)
def remove(id: uint256, name: bytes32):
    check_permission(id)
    with key = make_key(id, name):
        IF_ZERO(sload(key), return(False: bool))
        sstore(key, 0)
        log(type=NameRemoved, id, name)
        return(True: bool)


def lookup(id: uint256, name: bytes32):
    IF_ZERO(id, THROW())
    with key = make_key(id, name):
        return(sload(key): address)
